http://docs.getui.com/getui/server/csharp/start/


目前市场上的消息推送方式有两种：通知和透传。
什么是透传？透传即是透明传送，即传送网络无论传输业务如何，只负责将需要传送的业务传送到目的节点，同时保证传输的质量即可，而不对传输的业务进行处理。透传消息，就是消息体格式及内容，对于传递的通道来说是不去过问的，通道只负责消息的传递，对消息不做任何处理，当客户端接收到透传消息后，由客户端自己来决定如何处理消息。正是因为透传消息可以自定义消息体，也可以自定义消息的展示方式及后续动作处理，所以弥补了通知栏消息的一些不足之处(通知栏消息是直接展示出来，相关的动作客户端无法捕获到)。
 
透传消息主要有如下几个方面的特点：
1. 后台处理，用户无感知。
2. 前台展示，提醒用户。
3. 展示的多样化。

整个透传消息的流程如下：根据个推提供的API接口或在个推开发者平台上推送透传消息，个推服务端接收到推送的消息后，不做任何处理，直接发送给目标用户。当客户端SDK接收到透传消息后，以广播方式发送给客户端，客户端在配置的第三方BroadReceiver里接收到透传消息后进行处理。

透传消息的消息体，可以根据不同的需求传递不同的参数或格式。如传递一个简单的字符串，或传递一个Json字符串，里面根据需求传递需要的字段。
用户无感知的透传，如：更新相关信息，在主界面中相关栏位用红点标识进行弱提醒，推送一条命令用来检测用户是否有登录等。通知栏消息虽然方便的提醒用户，但也在一定程度上给用户带来了打扰，用户无感知的消息推送有时效果会更好。
用户有感知的透传：把透传消息处理成通知栏展示出来，提醒用户方便点击查看相关信息（如个人帐单信息），直接打开应用或跳转到指定的应用界面中（根据透传消息的相关参数来判断跳转到哪一个指定的界面，相关参数传递要打开的界面的类名或Intent即可）等。对于开发者，处理成通知栏的相关事件也是可以捕获的，如通知栏的展示、点击等事件都可以进行捕获，以方便进行后续的操作。
因透传消息可以自己处理成通知栏内容展示，所以通知栏的样式也可以根据需求来做对应的改变。在Android 4.4及以上的系统，通知栏可以是样式丰富的通知栏，放入图片和视频等；可以展示普通的通知，也可以展示多样化的通知。
--------------------------------------------------------------------------------------------------

消息：发送后不会在系统通知栏弹窗 ，需要自定义—> 样式和打开方式。

iOS 和 android 的消息都走移动推送自己的通道 。
通知：会自动在手机端弹窗，用户可以执行打开或者清除通知的操作。

iOS 的通知走APNs(苹果官方推送通知服务)
android 走移动推送自己的通道。
注：一般场景 iOS 需 App 在后台或者杀死状态下才会在通知栏弹出。不过 iOS 10 + 系统对推送通知做了较大增强 在前台也可以弹出通知，需代码写明。
注：透传消息，即自定义消息。只负责消息的推送，不做任何处理。客户端在接收到消息后，需要自己去处理消息的展示方式或后续动作。
Android 继承 MessageReciever 类的 onMessage 方法；
iOS 继承 onMessageReceived 方法；
iOS 的消息通道只有在 app 处于前台状态的情况下才处于激活状态 。



--------------------------------------------------------------------------------------------
通知：发送后会在系统通知栏收到展现，同时响铃或振动提醒用户。
消息：以透传的形式传递给客户端，无显示，发送后不会在系统通知栏展现，第三方应用后需要开发者写代码才能看到。

iOS常用通知
1、本地推送通知：（Local Notification）
2、远程推送通知：（Remote Notification）


通知的注意点
1、App在前台运行的时候，通知不会展示出来
2、点击通知，默认会自动打开推送通知的App
3、不管App是否打开，通知都可以如期发出


iOS推送需要在代码中通过TransmissionTemplate的setAPNInfo接口设置相应的APNs通知参数。
透传模板传输的数据最大为是2KB，APNs传输数据最大支持2KB。



